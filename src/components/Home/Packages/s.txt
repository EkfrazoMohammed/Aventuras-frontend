"""
Django settings for Drone project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

# from pathlib import Path
from pathlib import Path
import os
from datetime import timedelta
import firebase_admin
from firebase_admin import credentials, firestore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=c9ih^gohxdqspx(0#0^4md*ku!on^o$br_@1(0pcl_sy*34b3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['https://fibregrid.amxdrones.com', '142.93.214.65','fibregrid.amxdrones.com', '*','https://aventuras.co.in/api/v1/3000','http://127.0.0.1:3000',
'http://https://aventuras.co.in/api/v1/3000/'] 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'User',
    'DronCount',
    # 'rest_framework_gis',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'corsheaders',
    'django_celery_results',
    'django_celery_beat',
    # 'import_export',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
]

ROOT_URLCONF = 'Drone.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Drone.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': '/amx/auth/mysql.cnf',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'amxdrone123@gmail.com'
EMAIL_HOST_PASSWORD = 'kclpzrfgcmsrbase'
EMAIL_PORT = 587



# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT="/amx/site/public/static"
MEDIA_ROOT="/amx/site/public/media"

STATICFILES_DIRS = [
        '/amx/site/public/static/frontend'
]  

#SIMPLE_JWT = {
    #'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
    #'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    #'AUTH_HEADER_TYPES': ('Bearer',),

#}



JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_HEADERS = ['Authorization']


MEDIA_ROOT = os.getenv('MEDIA_ROOT', default=BASE_DIR / 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GOOGLE_MAPS_API_KEY ="AIzaSyBRafYk2dZNMQUrgpG7d5ztX3mFjMSn4TM"
# GDAL_LIBRARY_PATH = r'C:\OSGeo4W64\bin\gdal202'
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#
# DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'

#cred = credentials.Certificate('/amx/amxProject/Drone/amxstorage-firebase-adminsdk-bwwvu-d6f7f50a7a.json')
#cred = credentials.Certificate('/amx/amxProject/Drone/amxVersion2.json')
#cred = credentials.Certificate('/amx/amxProject/Drone/amxproject-8d962-firebase-adminsdk-3wtas-0c9efa6b87.json')
#cred = credentials.Certificate('/amx/amxProject/Drone/amxtest-dc1ac-firebase-adminsdk-qamta-95e66659da.json')
#cred = credentials.Certificate('/amx/amxProject/Drone/amx4-1d0df-firebase-adminsdk-kxeq4-fd5d616177.json')
#cred = credentials.Certificate('/amx/amxProject/Drone/storage-bcc40-firebase-adminsdk-zka8y-9d513bb24c.json')
#cred = credentials.Certificate('/amx/amxProject/Drone/amxv2-97b70-firebase-adminsdk-ua3nx-3844e879f1.json')

   #amx client credentials
cred = credentials.Certificate('/amx/amxProject/Drone/amxdrones-70b8a-firebase-adminsdk-tolsk-a446e83a81.json')

#cred = credentials.Certificate('/amx/amxProject/Drone/first-firebase-35b9f-firebase-adminsdk-khspw-8fee00d090.json')





# firebase_admin.initialize_app(cred)


firebase_admin.initialize_app(cred, {
      # 'storageBucket': 'amxstorage.appspot.com'  # Replace with your actual Firebase Storage bucket name
  #'storageBucket': 'amxversiontwo.appspot.com'
    #'storageBucket': 'amxproject-8d962.appspot.com'
    #'storageBucket': 'amxtest-dc1ac.appspot.com'
   #'storageBucket': 'amx4-1d0df.appspot.com'
   #'storageBucket': 'amxstorage.appspot.com'
   #'storageBucket': 'amxv2-97b70.appspot.com'
   
   #amx client credentials
   'storageBucket': 'amxdrones-70b8a.appspot.com'
   
   #'storageBucket': 'first-firebase-35b9f.appspot.com'
   
   

})


